{
    "scope": "source.esl, source.lsl",
    "completions": [
        {
            "trigger": "default",
            "contents": "default {\n\tstate_entry() {\n\t\t$0\n\t}\n}"
        }, {
            "trigger": "return",
            "contents": "return $0"
        }, {
            "trigger": "do",     
            "contents": "do {\n\t$0\n} while( ${1:condition} );"
        }, {
            "trigger": "else",   
            "contents": "else {\n\t$0\n}"
        }, {
            "trigger": "else if",
            "contents": "else if( ${1:condition} ) {\n$0\n}"
        }, {
            "trigger": "for",    
            "contents": "for( ${1:start}; ${2:condition}; ${3:step} ) {\n\t$0\n}"
        }, {
            "trigger": "if",     
            "contents": "if( ${1:condition} ) {\n$0\n}"
        }, {
            "trigger": "jump",   
            "contents": "jump ${1:label};"
        }, {
            "trigger": "state",  
            "contents": "state ${1:name}"
        }, {
            "trigger": "while",  
            "contents": "while( $1 ) {\n\t$0\n}"
        }, {
            "trigger": "@",      
            "contents": "@${1:label};"
        }, {
            "trigger": "float",
            "contents": "$0"
        }, {
            "trigger": "integer",
            "contents": "$0"
        }, {
            "trigger": "key",
            "contents": "$0"
        }, {
            "trigger": "list",
            "contents": "$0"
        }, {
            "trigger": "rotation",
            "contents": "$0"
        }, {
            "trigger": "string",
            "contents": "$0"
        }, {
            "trigger": "vector",
            "contents": "$0"
        },
        // A
        "ACTIVE",
        "AGENT",
        "AGENT_ALWAYS_RUN",
        "AGENT_ATTACHMENTS",
        "AGENT_AUTOPILOT",
        "AGENT_AWAY",
        "AGENT_BUSY",
        "AGENT_BY_LEGACY_NAME",
        "AGENT_BY_USERNAME",
        "AGENT_CROUCHING",
        "AGENT_FLYING",
        "AGENT_IN_AIR",
        "AGENT_LIST_PARCEL",
        "AGENT_LIST_PARCEL_OWNER",
        "AGENT_LIST_REGION",
        "AGENT_MOUSELOOK",
        "AGENT_ON_OBJECT",
        "AGENT_SCRIPTED",
        "AGENT_SITTING",
        "AGENT_TYPING",
        "AGENT_WALKING",
        "ALL_SIDES",
        "ANIM_ON",
        "ATTACH_AVATAR_CENTER",
        "ATTACH_BACK",
        "ATTACH_BELLY",
        "ATTACH_CHEST",
        "ATTACH_CHIN",
        "ATTACH_FACE_TONGUE",
		"ATTACH_FACE_JAW",
		"ATTACH_FACE_LEAR",
		"ATTACH_FACE_REAR",
		"ATTACH_FACE_LEYE",
		"ATTACH_FACE_REYE",
		"ATTACH_GROIN",
        "ATTACH_HEAD",
        "ATTACH_HIND_LFOOT",
		"ATTACH_HIND_RFOOT",
        "ATTACH_HUD_BOTTOM",
        "ATTACH_HUD_BOTTOM_LEFT",
        "ATTACH_HUD_BOTTOM_RIGHT",
        "ATTACH_HUD_CENTER_1",
        "ATTACH_HUD_CENTER_2",
        "ATTACH_HUD_TOP_CENTER",
        "ATTACH_HUD_TOP_LEFT",
        "ATTACH_HUD_TOP_RIGHT",
        "ATTACH_LEAR",
        "ATTACH_LEFT_PEC",
        "ATTACH_LEYE",
        "ATTACH_LFOOT",
        "ATTACH_LHAND",
        "ATTACH_LHAND_RING1",
        "ATTACH_LHIP",
        "ATTACH_LLARM",
        "ATTACH_LLLEG",
        "ATTACH_LSHOULDER",
        "ATTACH_LUARM",
        "ATTACH_LULEG",
        "ATTACH_LWING",
        "ATTACH_MOUTH",
        "ATTACH_NECK",
        "ATTACH_NOSE",
        "ATTACH_PELVIS",
        "ATTACH_REAR",
        "ATTACH_REYE",
        "ATTACH_RFOOT",
        "ATTACH_RHAND",
		"ATTACH_RHAND_RING1",
        "ATTACH_RHIP",
        "ATTACH_RIGHT_PEC",
        "ATTACH_RLARM",
        "ATTACH_RLLEG",
        "ATTACH_RSHOULDER",
        "ATTACH_RUARM",
        "ATTACH_RULEG",
        "ATTACH_RWING",
		"ATTACH_TAIL_BASE",
		"ATTACH_TAIL_TIP",
        "AVOID_CHARACTERS",
        "AVOID_DYNAMIC_OBSTACLES",
        "AVOID_NONE",
        // C
        {
            "trigger": "CAMERA_ACTIVE",
            "contents": "CAMERA_ACTIVE, ${1:integer isActive}, "
        }, {
            "trigger": "CAMERA_BEHINDNESS_ANGLE",
            "contents": "CAMERA_BEHINDNESS_ANGLE, ${1:float degrees}, "
        }, {
            "trigger": "CAMERA_BEHINDNESS_LAG",
            "contents": "CAMERA_BEHINDNESS_LAG, ${1:float seconds}, "
        }, {
            "trigger": "CAMERA_DISTANCE",
            "contents": "CAMERA_DISTANCE, ${1:float meters}, "
        }, {
            "trigger": "CAMERA_FOCUS",
            "contents": "CAMERA_FOCUS, ${1:vector position}, "
        }, {
            "trigger": "CAMERA_FOCUS_LAG",
            "contents": "CAMERA_FOCUS_LAG, ${1:float seconds}, "
        }, {
            "trigger": "CAMERA_FOCUS_LOCKED",
            "contents": "CAMERA_FOCUS_LOCKED, ${1:integer isLocked}, "
        }, {
            "trigger": "CAMERA_FOCUS_OFFSET",
            "contents": "CAMERA_FOCUS_OFFSET, ${1:vector meters}, "
        }, {
            "trigger": "CAMERA_FOCUS_THRESHOLD",
            "contents": "CAMERA_FOCUS_THRESHOLD, ${1:float meters}, "
        }, {
            "trigger": "CAMERA_PITCH",
            "contents": "CAMERA_PITCH, ${1:float degrees}, "
        }, {
            "trigger": "CAMERA_POSITION",
            "contents": "CAMERA_POSITION, ${1:vector position}, "
        }, {
            "trigger": "CAMERA_POSITION_LAG",
            "contents": "CAMERA_POSITION_LAG, ${1:float seconds}, "
        }, {
            "trigger": "CAMERA_POSITION_LOCKED",
            "contents": "CAMERA_POSITION_LOCKED, ${1:integer isLocked}, "
        }, {
            "trigger": "CAMERA_POSITION_THRESHOLD",
            "contents": "CAMERA_POSITION_THRESHOLD, ${1:float meters}, "
        },
        "CHANGED_ALLOWED_DROP",
        "CHANGED_COLOR",
        "CHANGED_INVENTORY",
        "CHANGED_LINK",
        "CHANGED_MEDIA",
        "CHANGED_OWNER",
        "CHANGED_REGION",
        "CHANGED_REGION_START",
        "CHANGED_SCALE",
        "CHANGED_SHAPE",
        "CHANGED_TELEPORT",
        "CHANGED_TEXTURE",
        "CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES",
        {
            "trigger": "CHARACTER_AVOIDANCE_MODE",
            "contents": "CHARACTER_AVOIDANCE_MODE, ${1:integer flags}, "
        },
        "CHARACTER_CMD_JUMP",
        "CHARACTER_CMD_SMOOTH_STOP",
        "CHARACTER_CMD_STOP",
        {
            "trigger": "CHARACTER_DESIRED_SPEED",
            "contents": "CHARACTER_DESIRED_SPEED, ${1:float speed}, "
        }, {
            "trigger": "CHARACTER_DESIRED_TURN_SPEED",
            "contents": "CHARACTER_DESIRED_TURN_SPEED, ${1:float speed}, "
        }, {
            "trigger": "CHARACTER_LENGTH",
            "contents": "CHARACTER_LENGTH, ${1:float length}, "
        },
        "CHARACTER_MAX_ACCEL",
        "CHARACTER_MAX_DECEL",
        "CHARACTER_MAX_SPEED",
        {
            "trigger": "CHARACTER_MAX_TURN_RADIUS",
            "contents": "CHARACTER_MAX_TURN_RADIUS, ${1:float radius}, "
        }, {
            "trigger": "CHARACTER_ORIENTATION",
            "contents": "CHARACTER_ORIENTATION, ${1:integer orientation}, "
        }, {
            "trigger": "CHARACTER_RADIUS",
            "contents": "CHARACTER_RADIUS, ${1:float radius}, "
        }, {
            "trigger": "CHARACTER_STAY_WITHIN_PARCEL",
            "contents": "CHARACTER_STAY_WITHIN_PARCEL, ${1: boolean stay}, "
        }, {
            "trigger": "CHARACTER_TYPE",
            "contents": "CHARACTER_TYPE, ${1:integer type}, "
        },
        "CHARACTER_TYPE_A",
        "CHARACTER_TYPE_B",
        "CHARACTER_TYPE_C",
        "CHARACTER_TYPE_D",
        "CHARACTER_TYPE_NONE",
        "CLICK_ACTION_BUY",
        "CLICK_ACTION_NONE",
        "CLICK_ACTION_OPEN",
        "CLICK_ACTION_OPEN_MEDIA",
        "CLICK_ACTION_PAY",
        "CLICK_ACTION_PLAY",
        "CLICK_ACTION_SIT",
        "CLICK_ACTION_TOUCH",
        "CLICK_ACTION_ZOOM",
        "CONTENT_TYPE_ATOM",
        "CONTENT_TYPE_FORM",
        "CONTENT_TYPE_HTML",
        "CONTENT_TYPE_JSON",
        "CONTENT_TYPE_LLSD",
        "CONTENT_TYPE_RSS",
        "CONTENT_TYPE_TEXT",
        "CONTENT_TYPE_XHTML",
        "CONTENT_TYPE_XML",
        "CONTROL_BACK",
        "CONTROL_DOWN",
        "CONTROL_FWD",
        "CONTROL_LBUTTON",
        "CONTROL_LEFT",
        "CONTROL_ML_LBUTTON",
        "CONTROL_RIGHT",
        "CONTROL_ROT_LEFT",
        "CONTROL_ROT_RIGHT",
        "CONTROL_UP",
        // D
        "DATA_BORN",
        "DATA_NAME",
        "DATA_ONLINE",
        "DATA_PAYINFO",
        "DATA_RATING",
        "DATA_SIM_POS",
        "DATA_SIM_RATING",
        "DATA_SIM_STATUS",
        "DEBUG_CHANNEL",
        "DEG_TO_RAD",
        "DENSITY",
        // E
        "EOF",
        "ERR_GENERIC",
        "ERR_MALFORMED_PARAMS",
        "ERR_PARCEL_PERMISSIONS",
        "ERR_RUNTIME_PERMISSIONS",
        "ERR_THROTTLED",
        "ESTATE_ACCESS_ALLOWED_AGENT_ADD",
        "ESTATE_ACCESS_ALLOWED_AGENT_REMOVE",
        "ESTATE_ACCESS_ALLOWED_GROUP_ADD",
        "ESTATE_ACCESS_ALLOWED_GROUP_REMOVE",
        "ESTATE_ACCESS_BANNED_AGENT_ADD",
        "ESTATE_ACCESS_BANNED_AGENT_REMOVE",
        // F
        "FALSE",
        "FORCE_DIRECT_PATH",
        "FRICTION",
        // G
        "GCNP_RADIUS",
        "GCNP_STATIC",
        "GRAVITY_MULTIPLIER",
        // H
        "HORIZONTAL",
        {
            "trigger": "HTTP_BODY_MAXLENGTH",
            "contents": "HTTP_BODY_MAXLENGTH, ${1:integer length}, "
        },
        "HTTP_BODY_TRUNCATED",
        {
            "trigger": "HTTP_CUSTOM_HEADER",
            "contents": "HTTP_CUSTOM_HEADER, ${1:string name}, ${2:string value}, "
        }, {
            "trigger": "HTTP_METHOD",
            "contents": "HTTP_METHOD, ${1:string method}, "
        }, {
            "trigger": "HTTP_MIMETYPE",
            "contents": "HTTP_MIMETYPE, ${1:string mimeType}, "
        }, {
            "trigger": "HTTP_PRAGMA_NO_CACHE",
            "contents": "HTTP_PRAGMA_NO_CACHE, ${1:integer send_header}, "
        }, {
            "trigger": "HTTP_VERBOSE_THROTTLE",
            "contents": "HTTP_VERBOSE_THROTTLE, ${1:integer noisy}, "
        }, {
            "trigger": "HTTP_VERIFY_CERT",
            "contents": "HTTP_VERIFY_CERT, ${1:integer verify}, "
        },
        // I
        "INVENTORY_ALL",
        "INVENTORY_ANIMATION",
        "INVENTORY_BODYPART",
        "INVENTORY_CLOTHING",
        "INVENTORY_GESTURE",
        "INVENTORY_LANDMARK",
        "INVENTORY_NONE",
        "INVENTORY_NOTECARD",
        "INVENTORY_OBJECT",
        "INVENTORY_SCRIPT",
        "INVENTORY_SOUND",
        "INVENTORY_TEXTURE",
        "INVALID_LINK",
        // J
        "JSON_APPEND",
        "JSON_ARRAY",
        "JSON_DELETE",
        "JSON_FALSE",
        "JSON_INVALID",
        "JSON_NULL",
        "JSON_NUMBER",
        "JSON_OBJECT",
        "JSON_STRING",
        "JSON_TRUE",
        // K
        "KFM_CMD_PAUSE",
        "KFM_CMD_PLAY",
        "KFM_CMD_SET_MODE",
        "KFM_CMD_STOP",
        "KFM_COMMAND",
        "KFM_DATA",
        "KFM_FORWARD",
        "KFM_LOOP",
        "KFM_MODE",
        "KFM_PING_PONG",
        "KFM_REVERSE",
        "KFM_ROTATION",
        "KFM_TRANSLATION",
        // L
        "LAND_LEVEL",
        "LAND_LOWER",
        "LAND_NOISE",
        "LAND_RAISE",
        "LAND_REVERT",
        "LAND_SMOOTH",
        "LINK_ALL_CHILDREN",
        "LINK_ALL_OTHERS",
        "LINK_ROOT",
        "LINK_SET",
        "LINK_THIS",
        "LIST_STAT_GEOMETRIC_MEAN",
        "LIST_STAT_MAX",
        "LIST_STAT_MEAN",
        "LIST_STAT_MEDIAN",
        "LIST_STAT_MIN",
        "LIST_STAT_NUM_COUNT",
        "LIST_STAT_RANGE",
        "LIST_STAT_STD_DEV",
        "LIST_STAT_SUM",
        "LIST_STAT_SUM_SQUARES",
        "LOOP",
        // M
        "MASK_BASE",
        "MASK_EVERYONE",
        "MASK_GROUP",
        "MASK_NEXT",
        "MASK_OWNER",
        // N
        "NULL_KEY",
        "NO_EXPERIENCE_PERMISSION",
        "NOT_EXPERIENCE",
        "NO_SIT_TARGET",
        "NOT_SIT_T",
        // O
        "OBJECT_ATTACHED_POINT",
        "OBJECT_ATTACHED_SLOTS_AVAILABLE",
        "OBJECT_BODY_SHAPE_TYPE",
        "OBJECT_CHARACTER_TIME",
        "OBJECT_CLICK_ACTION",
        "OBJECT_CREATOR",
        "OBJECT_DESC",
        "OBJECT_GROUP",
        "OBJECT_GROUP_TAG",
        "OBJECT_HOVER_HEIGHT",
        "OBJECT_LAST_OWNER_ID",
        "OBJECT_NAME",
        "OBJECT_OMEGA",
        "OBJECT_OWNER",
        "OBJECT_PATHFINDING_TYPE",
        "OBJECT_PHANTOM",
        "OBJECT_PHYSICS",
        "OBJECT_PHYSICS_COST",
        "OBJECT_POS",
        "OBJECT_PRIM_COUNT",
        "OBJECT_PRIM_EQUIVALENCE",
        "OBJECT_RENDER_WEIGHT",
        "OBJECT_RETURN_PARCEL",
        "OBJECT_RETURN_PARCEL_OWNER",
        "OBJECT_RETURN_REGION",
        "OBJECT_REZZER_KEY",
        "OBJECT_ROOT",
        "OBJECT_ROT",
        "OBJECT_RUNNING_SCRIPT_COUNT",
        "OBJECT_SCRIPT_MEMORY",
        "OBJECT_SCRIPT_TIME",
        "OBJECT_SERVER_COST",
        "OBJECT_STREAMING_COST",
        "OBJECT_TEMP_ATTACHED",
        "OBJECT_TEMP_ON_REZ",
        "OBJECT_TOTAL_INVENTORY_COUNT",
        "OBJECT_TOTAL_SCRIPT_COUNT",
        "OBJECT_UNKNOWN_DETAIL",
        "OBJECT_VELOCITY",
        "OPT_AVATAR",
        "OPT_CHARACTER",
        "OPT_EXCLUSION_VOLUME",
        "OPT_LEGACY_LINKSET",
        "OPT_MATERIAL_VOLUME",
        "OPT_OTHER",
        "OPT_STATIC_OBSTACLE",
        "OPT_WALKABLE",
        // P
        "PARCEL_COUNT_GROUP",
        "PARCEL_COUNT_OTHER",
        "PARCEL_COUNT_OWNER",
        "PARCEL_COUNT_SELECTED",
        "PARCEL_COUNT_TEMP",
        "PARCEL_COUNT_TOTAL",
        "PARCEL_DETAILS_AREA",
        "PARCEL_DETAILS_DESC",
        "PARCEL_DETAILS_GROUP",
        "PARCEL_DETAILS_ID",
        "PARCEL_DETAILS_NAME",
        "PARCEL_DETAILS_OWNER",
        "PARCEL_DETAILS_SEE_AVATARS",
        "PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY",
        "PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS",
        "PARCEL_FLAG_ALLOW_CREATE_OBJECTS",
        "PARCEL_FLAG_ALLOW_DAMAGE",
        "PARCEL_FLAG_ALLOW_FLY",
        "PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY",
        "PARCEL_FLAG_ALLOW_GROUP_SCRIPTS",
        "PARCEL_FLAG_ALLOW_LANDMARK",
        "PARCEL_FLAG_ALLOW_SCRIPTS",
        "PARCEL_FLAG_ALLOW_TERRAFORM",
        "PARCEL_FLAG_LOCAL_SOUND_ONLY",
        "PARCEL_FLAG_RESTRICT_PUSHOBJECT",
        "PARCEL_FLAG_USE_ACCESS_GROUP",
        "PARCEL_FLAG_USE_ACCESS_LIST",
        "PARCEL_FLAG_USE_BAN_LIST",
        "PARCEL_FLAG_USE_LAND_PASS_LIST",
        "PARCEL_MEDIA_COMMAND_AGENT",
        "PARCEL_MEDIA_COMMAND_AUTO_ALIGN",
        {
            "trigger": "PARCEL_MEDIA_COMMAND_DESC",
            "contents": "PARCEL_MEDIA_COMMAND_DESC, ${1:string desc}, "
        },
        "PARCEL_MEDIA_COMMAND_LOOP",
        {
            "trigger": "PARCEL_MEDIA_COMMAND_LOOP_SET",
            "contents": "PARCEL_MEDIA_COMMAND_LOOP_SET, ${1:float loop}, "
        },
        "PARCEL_MEDIA_COMMAND_PAUSE",
        "PARCEL_MEDIA_COMMAND_PLAY",
        "PARCEL_MEDIA_COMMAND_SIZE",
        "PARCEL_MEDIA_COMMAND_STOP",
        "PARCEL_MEDIA_COMMAND_TEXTURE",
        "PARCEL_MEDIA_COMMAND_TIME",
        "PARCEL_MEDIA_COMMAND_TYPE",
        "PARCEL_MEDIA_COMMAND_UNLOAD",
        "PARCEL_MEDIA_COMMAND_URL",
        "PASSIVE",
        "PASS_ALWAYS",
        "PASS_IF_NOT_HANDLED",
        "PASS_NEVER",
        "PATROL_PAUSE_AT_WAYPOINTS",
        "PAY_DEFAULT",
        "PAY_HIDE",
        "PAYMENT_INFO_ON_FILE",
        "PAYMENT_INFO_USED",
        "PERMISSION_ATTACH",
        "PERMISSION_CHANGE_LINKS",
        "PERMISSION_CONTROL_CAMERA",
        "PERMISSION_DEBIT",
        "PERMISSION_OVERRIDE_ANIMATIONS",
        "PERMISSION_RETURN_OBJECTS",
        "PERMISSION_SILENT_ESTATE_MANAGEMENT",
        "PERMISSION_TAKE_CONTROLS",
        "PERMISSION_TELEPORT",
        "PERMISSION_TRACK_CAMERA",
        "PERMISSION_TRIGGER_ANIMATION",
        "PERM_ALL",
        "PERM_COPY",
        "PERM_MODIFY",
        "PERM_MOVE",
        "PERM_TRANSFER",
        "PI",
        "PING_PONG",
        "PI_BY_TWO",
        "PRIM_ALLOW_UNSIT",
        "PRIM_ALPHA_MODE",
        "PRIM_ALPHA_MODE_BLEND",
        "PRIM_ALPHA_MODE_EMISSIVE",
        "PRIM_ALPHA_MODE_MASK",
        "PRIM_ALPHA_MODE_NONE",
        "PRIM_BUMP_BARK",
        "PRIM_BUMP_BLOBS",
        "PRIM_BUMP_BRICKS",
        "PRIM_BUMP_BRIGHT",
        "PRIM_BUMP_CHECKER",
        "PRIM_BUMP_CONCRETE",
        "PRIM_BUMP_DARK",
        "PRIM_BUMP_DISKS",
        "PRIM_BUMP_GRAVEL",
        "PRIM_BUMP_LARGETILE",
        "PRIM_BUMP_NONE",
        "PRIM_BUMP_SHINY",
        "PRIM_BUMP_SIDING",
        "PRIM_BUMP_STONE",
        "PRIM_BUMP_STUCCO",
        "PRIM_BUMP_SUCTION",
        "PRIM_BUMP_TILE",
        "PRIM_BUMP_WEAVE",
        "PRIM_BUMP_WOOD",
        "PRIM_COLOR",
        "PRIM_DESC",
        "PRIM_FLEXIBLE",
        "PRIM_FULLBRIGHT",
        "PRIM_GLOW",
        "PRIM_HOLE_CIRCLE",
        "PRIM_HOLE_DEFAULT",
        "PRIM_HOLE_SQUARE",
        "PRIM_HOLE_TRIANGLE",
        "PRIM_LINK_TARGET",
        "PRIM_MATERIAL",
        "PRIM_MATERIAL_FLESH",
        "PRIM_MATERIAL_GLASS",
        "PRIM_MATERIAL_METAL",
        "PRIM_MATERIAL_PLASTIC",
        "PRIM_MATERIAL_RUBBER",
        "PRIM_MATERIAL_STONE",
        "PRIM_MATERIAL_WOOD",
        "PRIM_MEDIA_ALT_IMAGE_ENABLE",
        "PRIM_MEDIA_AUTO_LOOP",
        "PRIM_MEDIA_AUTO_PLAY",
        "PRIM_MEDIA_AUTO_SCALE",
        "PRIM_MEDIA_AUTO_ZOOM",
        "PRIM_MEDIA_CONTROLS",
        "PRIM_MEDIA_CONTROLS_MINI",
        "PRIM_MEDIA_CONTROLS_STANDARD",
        "PRIM_MEDIA_CURRENT_URL",
        "PRIM_MEDIA_FIRST_CLICK_INTERACT",
        "PRIM_MEDIA_HEIGHT_PIXELS",
        "PRIM_MEDIA_HOME_URL",
        "PRIM_MEDIA_PERMS_CONTROL",
        "PRIM_MEDIA_PERMS_INTERACT",
        "PRIM_MEDIA_PERM_ANYONE",
        "PRIM_MEDIA_PERM_GROUP",
        "PRIM_MEDIA_PERM_NONE",
        "PRIM_MEDIA_PERM_OWNER",
        "PRIM_MEDIA_WHITELIST",
        "PRIM_MEDIA_WHITELIST_ENABLE",
        "PRIM_MEDIA_WIDTH_PIXELS",
        "PRIM_NAME",
        "PRIM_NORMAL",
        "PRIM_OMEGA",
        "PRIM_PHANTOM",
        "PRIM_PHYSICS",
        "PRIM_PHYSICS_SHAPE_CONVEX",
        "PRIM_PHYSICS_SHAPE_NONE",
        "PRIM_PHYSICS_SHAPE_PRIM",
        "PRIM_PHYSICS_SHAPE_TYPE",
        "PRIM_POINT_LIGHT",
        "PRIM_POSITION",
        "PRIM_POS_LOCAL",
        "PRIM_ROTATION",
        "PRIM_ROT_LOCAL",
        "PRIM_SCRIPTED_SIT_ONLY",
        "PRIM_SCULPT_FLAG_INVERT",
        "PRIM_SCULPT_FLAG_MIRROR",
        "PRIM_SCULPT_TYPE_CYLINDER",
        "PRIM_SCULPT_TYPE_MASK",
        "PRIM_SCULPT_TYPE_PLANE",
        "PRIM_SCULPT_TYPE_SPHERE",
        "PRIM_SCULPT_TYPE_TORUS",
        "PRIM_SHINY_HIGH",
        "PRIM_SHINY_LOW",
        "PRIM_SHINY_MEDIUM",
        "PRIM_SHINY_NONE",
        "PRIM_SIT_TARGET",
        "PRIM_SIZE",
        "PRIM_SLICE",
        "PRIM_SPECULAR",
        "PRIM_TEMP_ON_REZ",
        "PRIM_TEXGEN",
        "PRIM_TEXGEN_DEFAULT",
        "PRIM_TEXGEN_PLANAR",
        "PRIM_TEXT",
        "PRIM_TEXTURE",
        "PRIM_TYPE",
        "PRIM_TYPE_BOX",
        "PRIM_TYPE_CYLINDER",
        "PRIM_TYPE_PRISM",
        "PRIM_TYPE_RING",
        "PRIM_TYPE_SCULPT",
        "PRIM_TYPE_SPHERE",
        "PRIM_TYPE_TORUS",
        "PRIM_TYPE_TUBE",
        "PROFILE_NONE",
        "PROFILE_SCRIPT_MEMORY",
        "PSYS_PART_BF_DEST_COLOR",
        "PSYS_PART_BF_ONE",
        "PSYS_PART_BF_ONE_MINUS_DEST_COLOR",
        "PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA",
        "PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR",
        "PSYS_PART_BF_SOURCE_ALPHA",
        "PSYS_PART_BF_SOURCE_COLOR",
        "PSYS_PART_BF_ZERO",
        "PSYS_PART_BLEND_FUNC_DEST",
        "PSYS_PART_BLEND_FUNC_SOURCE",
        {
            "trigger": "PSYS_PART_BOUNCE_MASK",
            "contents": "PSYS_PART_BOUNCE_MASK|"
        }, {
            "trigger": "PSYS_PART_EMISSIVE_MASK",
            "contents": "PSYS_PART_EMISSIVE_MASK|"
        }, {
            "trigger": "PSYS_PART_END_ALPHA",
            "contents": "PSYS_PART_END_ALPHA, ${1:float alpha_end}, "
        }, {
            "trigger": "PSYS_PART_END_COLOR",
            "contents": "PSYS_PART_END_COLOR, ${1:vector color_end}, "
        }, {
            "trigger": "PSYS_PART_END_GLOW",
            "contents": "PSYS_PART_END_GLOW, ${1:float glow_end}, "
        }, {
            "trigger": "PSYS_PART_END_SCALE",
            "contents": "PSYS_PART_END_SCALE, ${1:vector scale_end}, "
        }, {
            "trigger": "PSYS_PART_FLAGS",
            "contents": "PSYS_PART_FLAGS, ${1:integer flags}, "
        }, {
            "trigger": "PSYS_PART_FOLLOW_SRC_MASK",
            "contents": "PSYS_PART_FOLLOW_SRC_MASK|"
        }, {
            "trigger": "PSYS_PART_FOLLOW_VELOCITY_MASK",
            "contents": "PSYS_PART_FOLLOW_VELOCITY_MASK|"
        }, {
            "trigger": "PSYS_PART_INTERP_COLOR_MASK",
            "contents": "PSYS_PART_INTERP_COLOR_MASK|"
        }, {
            "trigger": "PSYS_PART_INTERP_SCALE_MASK",
            "contents": "PSYS_PART_INTERP_SCALE_MASK|"
        }, {
            "trigger": "PSYS_PART_MAX_AGE",
            "contents": "PSYS_PART_MAX_AGE, ${1:float particle_duration}, "
        }, {
            "trigger": "PSYS_PART_RIBBON_MASK",
            "contents": "PSYS_PART_RIBBON_MASK|"
        }, {
            "trigger": "PSYS_PART_START_ALPHA",
            "contents": "PSYS_PART_START_ALPHA, ${1:float alpha_start}, "
        }, {
            "trigger": "PSYS_PART_START_COLOR",
            "contents": "PSYS_PART_START_COLOR, ${1:vector color_start}, "
        }, {
            "trigger": "PSYS_PART_START_GLOW",
            "contents": "PSYS_PART_START_GLOW, ${1:float glow_start}, "
        }, {
            "trigger": "PSYS_PART_START_SCALE",
            "contents": "PSYS_PART_START_SCALE, ${1:vector scale_start}, "
        }, {
            "trigger": "PSYS_PART_TARGET_LINEAR_MASK",
            "contents": "PSYS_PART_TARGET_LINEAR_MASK|"
        }, {
            "trigger": "PSYS_PART_TARGET_POS_MASK",
            "contents": "PSYS_PART_TARGET_POS_MASK|"
        }, {
            "trigger": "PSYS_PART_WIND_MASK",
            "contents": "PSYS_PART_WIND_MASK|"
        }, {
            "trigger": "PSYS_SRC_ACCEL",
            "contents": "PSYS_SRC_ACCEL, ${1:vector acceleration}, "
        }, {
            "trigger": "PSYS_SRC_ANGLE_BEGIN",
            "contents": "PSYS_SRC_ANGLE_BEGIN, ${1:float angle_start}, "
        }, {
            "trigger": "PSYS_SRC_ANGLE_END",
            "contents": "PSYS_SRC_ANGLE_END, ${1:float angle_end}, "
        }, {
            "trigger": "PSYS_SRC_BURST_PART_COUNT",
            "contents": "PSYS_SRC_BURST_PART_COUNT, ${1:integer particles_per_burst}, "
        }, {
            "trigger": "PSYS_SRC_BURST_RADIUS",
            "contents": "PSYS_SRC_BURST_RADIUS, ${1:float radius}, "
        }, {
            "trigger": "PSYS_SRC_BURST_RATE",
            "contents": "PSYS_SRC_BURST_RATE, ${1:float burst_delay}, "
        }, {
            "trigger": "PSYS_SRC_BURST_SPEED_MAX",
            "contents": "PSYS_SRC_BURST_SPEED_MAX, ${1:float speed_max}, "
        }, {
            "trigger": "PSYS_SRC_BURST_SPEED_MIN",
            "contents": "PSYS_SRC_BURST_SPEED_MIN, ${1:float speed_min}, "
        }, {
            "trigger": "PSYS_SRC_MAX_AGE",
            "contents": "PSYS_SRC_MAX_AGE, ${1:float emitter_duration}, "
        }, {
            "trigger": "PSYS_SRC_OMEGA",
            "contents": "PSYS_SRC_OMEGA, ${1:vector angular_velocity}, "
        }, {
            "trigger": "PSYS_SRC_PATTERN",
            "contents": "PSYS_SRC_PATTERN, ${1:integer pattern}, "
        }, {
            "trigger": "PSYS_SRC_PATTERN_ANGLE",
            "contents": "PSYS_SRC_PATTERN_ANGLE, "
        }, {
            "trigger": "PSYS_SRC_PATTERN_ANGLE_CONE",
            "contents": "PSYS_SRC_PATTERN_ANGLE_CONE, "
        }, {
            "trigger": "PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY",
            "contents": "PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY, "
        }, {
            "trigger": "PSYS_SRC_PATTERN_DROP",
            "contents": "PSYS_SRC_PATTERN_DROP, "
        }, {
            "trigger": "PSYS_SRC_PATTERN_EXPLODE",
            "contents": "PSYS_SRC_PATTERN_EXPLODE, "
        }, {
            "trigger": "PSYS_SRC_TARGET_KEY",
            "contents": "PSYS_SRC_TARGET_KEY, ${1:key target}, "
        }, {
            "trigger": "PSYS_SRC_TEXTURE",
            "contents": "PSYS_SRC_TEXTURE, ${1:key texture}, "
        },
        "PU_EVADE_HIDDEN",
        "PU_EVADE_SPOTTED",
        "PU_FAILURE_DYNAMIC_PATHFINDING_DISABLED",
        "PU_FAILURE_INVALID_GOAL",
        "PU_FAILURE_INVALID_START",
        "PU_FAILURE_NO_NAVMESH",
        "PU_FAILURE_NO_VALID_DESTINATION",
        "PU_FAILURE_OTHER",
        "PU_FAILURE_PARCEL_UNREACHABLE",
        "PU_FAILURE_TARGET_GONE",
        "PU_FAILURE_UNREACHABLE",
        "PU_GOAL_REACHED",
        "PU_SLOWDOWN_DISTANCE_REACHED",
        "PUBLIC_CHANNEL",
        "PURSUIT_FUZZ_FACTOR",
        "PURSUIT_GOAL_TOLERANCE",
        "PURSUIT_INTERCEPT",
        "PURSUIT_OFFSET",
        // R
        "RAD_TO_DEG",
        "RCERR_CAST_TIME_EXCEEDED",
        "RCERR_SIM_PERF_LOW",
        "RCERR_UNKNOWN",
        {
            "trigger": "RC_DATA_FLAGS",
            "contents": "RC_DATA_FLAGS, ${1:integer flags}, "
        }, {
            "trigger": "RC_DETECT_PHANTOM",
            "contents": "RC_DETECT_PHANTOM, ${1:integer detected_phantom}, "
        },
        "RC_GET_LINK_NUM",
        "RC_GET_NORMAL",
        "RC_GET_ROOT_KEY",
        {
            "trigger": "RC_MAX_HITS",
            "contents": "RC_MAX_HITS, ${1:integer max_hits}, "
        },
        "RC_REJECT_AGENTS",
        "RC_REJECT_LAND",
        "RC_REJECT_NONPHYSICAL",
        "RC_REJECT_PHYSICAL",
        {
            "trigger": "RC_REJECT_TYPES",
            "contents": "RC_REJECT_TYPES, ${1:integer filter_mask}, "
        },
        
        "REGION_FLAG_ALLOW_DAMAGE",
        "REGION_FLAG_ALLOW_DIRECT_TELEPORT",
        "REGION_FLAG_BLOCK_FLY",
        "REGION_FLAG_BLOCK_TERRAFORM",
        "REGION_FLAG_DISABLE_COLLISIONS",
        "REGION_FLAG_DISABLE_PHYSICS",
        "REGION_FLAG_FIXED_SUN",
        "REGION_FLAG_RESTRICT_PUSHOBJECT",
        "REGION_FLAG_SANDBOX",
        "REMOTE_DATA_CHANNEL",
        "REMOTE_DATA_REPLY",
        "REMOTE_DATA_REQUEST",
        "REQUIRE_LINE_OF_SIGHT",
        "RESTITUTION",
        "REVERSE",
        "ROTATE",
        // S
        "SCALE",
        "SCRIPTED",
        "SIM_STAT_PCT_CHARS_STEPPED",
        "SIT_NOT_EXPERIENCE",
        "SIT_NO_EXPERIENCE_PERMISSION",
        "SIT_NO_SIT_TARGET",
        "SIT_INVALID_AGENT",
        "SIT_INVALID_LINK",
        "SIT_NO_ACCESS",
        "SIT_INVALID_OBJECT",
        "SMOOTH",
        "SQRT2",
        "STATUS_BLOCK_GRAB",
        "STATUS_BLOCK_GRAB_OBJECT",
        "STATUS_BOUNDS_ERROR",
        //"STATUS_CAST_SHADOWS",
        "STATUS_DIE_AT_EDGE",
        "STATUS_INTERNAL_ERROR",
        "STATUS_MALFORMED_PARAMS",
        "STATUS_NOT_FOUND",
        "STATUS_NOT_SUPPORTED",
        "STATUS_OK",
        "STATUS_PHANTOM",
        "STATUS_PHYSICS",
        "STATUS_RETURN_AT_EDGE",
        "STATUS_ROTATE_X",
        "STATUS_ROTATE_Y",
        "STATUS_ROTATE_Z",
        "STATUS_SANDBOX",
        "STATUS_TYPE_MISMATCH",
        "STATUS_WHITELIST_FAILED",
        "STRING_TRIM",
        "STRING_TRIM_HEAD",
        "STRING_TRIM_TAIL",
        // T
        "TEXTURE_BLANK",
        "TEXTURE_DEFAULT",
        "TEXTURE_MEDIA",
        "TEXTURE_PLYWOOD",
        "TEXTURE_TRANSPARENT",
        "TOUCH_INVALID_FACE",
        "TOUCH_INVALID_TEXCOORD",
        "TOUCH_INVALID_VECTOR",
        "TRAVERSAL_TYPE",
        "TRAVERSAL_TYPE_FAST",
        "TRAVERSAL_TYPE_NONE",
        "TRAVERSAL_TYPE_SLOW",
        "TRUE",
        "TWO_PI",
        "TYPE_FLOAT",
        "TYPE_INTEGER",
        "TYPE_INVALID",
        "TYPE_KEY",
        "TYPE_ROTATION",
        "TYPE_STRING",
        "TYPE_VECTOR",
        // U
        "URL_REQUEST_DENIED",
        "URL_REQUEST_GRANTED",
        // V
        "VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY",
        "VEHICLE_ANGULAR_DEFLECTION_TIMESCALE",
        "VEHICLE_ANGULAR_FRICTION_TIMESCALE",
        "VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE",
        "VEHICLE_ANGULAR_MOTOR_DIRECTION",
        "VEHICLE_ANGULAR_MOTOR_TIMESCALE",
        "VEHICLE_BANKING_EFFICIENCY",
        "VEHICLE_BANKING_MIX",
        "VEHICLE_BANKING_TIMESCALE",
        "VEHICLE_BUOYANCY",
        "VEHICLE_FLAG_CAMERA_DECOUPLED",
        "VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT",
        "VEHICLE_FLAG_HOVER_TERRAIN_ONLY",
        "VEHICLE_FLAG_HOVER_UP_ONLY",
        "VEHICLE_FLAG_HOVER_WATER_ONLY",
        "VEHICLE_FLAG_LIMIT_MOTOR_UP",
        "VEHICLE_FLAG_LIMIT_ROLL_ONLY",
        "VEHICLE_FLAG_MOUSELOOK_BANK",
        "VEHICLE_FLAG_MOUSELOOK_STEER",
        "VEHICLE_FLAG_NO_DEFLECTION_UP",
        "VEHICLE_FLAG_NO_FLY_UP",
        "VEHICLE_HOVER_EFFICIENCY",
        "VEHICLE_HOVER_HEIGHT",
        "VEHICLE_HOVER_TIMESCALE",
        "VEHICLE_LINEAR_DEFLECTION_EFFICIENCY",
        "VEHICLE_LINEAR_DEFLECTION_TIMESCALE",
        "VEHICLE_LINEAR_FRICTION_TIMESCALE",
        "VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE",
        "VEHICLE_LINEAR_MOTOR_DIRECTION",
        "VEHICLE_LINEAR_MOTOR_OFFSET",
        "VEHICLE_LINEAR_MOTOR_TIMESCALE",
        "VEHICLE_REFERENCE_FRAME",
        "VEHICLE_TYPE_AIRPLANE",
        "VEHICLE_TYPE_BALLOON",
        "VEHICLE_TYPE_BOAT",
        "VEHICLE_TYPE_CAR",
        "VEHICLE_TYPE_NONE",
        "VEHICLE_TYPE_SLED",
        "VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY",
        "VEHICLE_VERTICAL_ATTRACTION_TIMESCALE",
        "VERTICAL",
        "WANDER_PAUSE_AT_WAYPOINTS",
        // X
        "XP_ERROR_NONE",
        "XP_ERROR_THROTTLED",
        "XP_ERROR_EXPERIENCES_DISABLED",
        "XP_ERROR_INVALID_PARAMETERS",
        "XP_ERROR_NOT_PERMITTED",
        "XP_ERROR_NO_EXPERIENCE",
        "XP_ERROR_NOT_FOUND",
        "XP_ERROR_INVALID_EXPERIENCE",
        "XP_ERROR_EXPERIENCE_DISABLED",
        "XP_ERROR_EXPERIENCE_SUSPENDED",
        "XP_ERROR_UNKNOWN_ERROR",
        "XP_ERROR_QUOTA_EXCEEDED",
        "XP_ERROR_STORE_DISABLED",
        "XP_ERROR_STORAGE_EXCEPTION",
        "XP_ERROR_KEY_NOT_FOUND",
        "XP_ERROR_RETRY_UPDATE",
        "XP_ERROR_MATURITY_EXCEEDED",
        "XP_ERROR_NOT_PERMITTED_LAND",
        "XP_ERROR_REQUEST_PERM_TIMEOUT",
        // Z
        "ZERO_ROTATION",
        "ZERO_VECTOR",
        {
            "trigger": "llGodLikeRezObject",
            "contents": "llGodLikeRezObject( ${1:key inventory}, ${2:vector pos} )"
        }, {
            "trigger": "llSetInventoryPermMask",
            "contents": "llSetInventoryPermMask( ${1:string item}, ${2:integer mask}, ${3:integer perm} )"
        }, {
            "trigger": "llSetObjectPermMask",
            "contents": "llSetObjectPermMask( ${1:integer mask}, ${2:integer perm} )"
        }, {
            "trigger": "print",
            "contents": "print( ${1:string value} )"
        }, {
            "trigger": "at_rot_target",
            "contents": "at_rot_target( integer ${1:handle}, rotation ${2:target_rot}, rotation ${3:ourrot} ) {\n\t$0\n}"
        }, {
            "trigger": "at_target",
            "contents": "at_target( integer ${1:tnum}, vector ${2:targetpos}, vector ${3:ourpos} ) {\n\t$0\n}"
        }, {
            "trigger": "attach",                
            "contents": "attach( key ${1:id} ) {\n\t$0\n}"
        }, {
            "trigger": "changed",               
            "contents": "changed( integer ${1:change} ) {\n\t$0\n}"
        }, {
            "trigger": "collision",             
            "contents": "collision( integer ${1:index} ) {\n\t$0\n}"
        }, {
            "trigger": "collision_end",         
            "contents": "collision_end( integer ${1:index} ) {\n\t$0\n}"
        }, {
            "trigger": "collision_start",       
            "contents": "collision_start( integer ${1:index} ) {\n\t$0\n}"
        }, {
            "trigger": "control",               
            "contents": "control( key ${1:id}, integer ${2:level}, integer ${3:edge} ) {\n\t$0\n}"
        }, {
            "trigger": "dataserver",            
            "contents": "dataserver( key ${1:query_id}, string ${2:data} ) {\n\t$0\n}"
        }, {
            "trigger": "email",                 
            "contents": "email( string ${1:time}, string ${2:address}, string ${3:subject}, string ${4:message}, integer ${5:num_left} ) {\n\t$0\n}"
        }, {
            "trigger": "experience_permissions",                 
            "contents": "experience_permissions( key ${1:agent_id} ) {\n\t$0\n}"
        }, {
            "trigger": "experience_permissions_denied",                 
            "contents": "experience_permissions_denied( key ${1:agent_id}, integer ${2:reason} ) {\n\t$0\n}"
        }, {
            "trigger": "http_request",          
            "contents": "http_request( key ${1:request_id}, string ${2:method}, string ${3:body} ) {\n\t$0\n}"
        }, {
            "trigger": "http_response",         
            "contents": "http_response( key ${1:request_id}, integer ${2:status}, list ${3:metadata}, string ${4:body} ) {\n\t$0\n}"
        }, {
            "trigger": "land_collision",        
            "contents": "land_collision( vector ${1:pos} ) {\n\t$0\n}"
        }, {
            "trigger": "land_collision_end",    
            "contents": "land_collision_end( vector ${1:pos} ) {\n\t$0\n}"
        }, {
            "trigger": "land_collision_start",  
            "contents": "land_collision_start( vector ${1:pos} ) {\n\t$0\n}"
        }, {
            "trigger": "link_message",          
            "contents": "link_message( integer ${1:sender_num}, integer ${2:num}, string ${3:str}, key ${4:id} ) {\n\t$0\n}"
        }, {
            "trigger": "listen",                
            "contents": "listen( integer ${1:channel}, string ${2:name}, key ${3:id}, string ${4:message} ) {\n\t$0\n}"
        }, {
            "trigger": "money",                 
            "contents": "money( key ${1:id}, integer ${2:amount} ) {\n\t$0\n}"
        }, {
            "trigger": "moving_end",            
            "contents": "moving_end() {\n\t$0\n}"
        }, {
            "trigger": "moving_start",          
            "contents": "moving_start() {\n\t$0\n}"
        }, {
            "trigger": "no_sensor",             
            "contents": "no_sensor() {\n\t$0\n}"
        }, {
            "trigger": "not_at_rot_target",     
            "contents": "not_at_rot_target() {\n\t$0\n}"
        }, {
            "trigger": "not_at_target",         
            "contents": "not_at_target() {\n\t$0\n}"
        }, {
            "trigger": "object_rez",            
            "contents": "object_rez( key ${1:id} ) {\n\t$0\n}"
        }, {
            "trigger": "on_rez",                
            "contents": "on_rez( integer ${1:start_param} ) {\n\t$0\n}"
        }, {
            "trigger": "path_update",           
            "contents": "path_update( integer ${1:type}, list ${2:reserved} ) {\n\t$0\n}"
        }, {
            "trigger": "remote_data",           
            "contents": "remote_data( integer ${1:event_type}, key ${2:channel}, key ${3:message_id}, string ${4:sender}, integer ${5:idata}, string ${6:sdata} ) {\n\t$0\n}"
        }, {
            "trigger": "run_time_permissions",  
            "contents": "run_time_permissions( integer ${1:perm} ) {\n\t$0\n}"
        }, {
            "trigger": "sensor",                
            "contents": "sensor( integer ${1:count} ) {\n\t$0\n}"
        }, {
            "trigger": "state_entry",           
            "contents": "state_entry() {\n\t$0\n}"
        }, {
            "trigger": "state_exit",            
            "contents": "state_exit() {\n\t$0\n}"
        }, {
            "trigger": "timer",                 
            "contents": "timer() {\n\t$0\n}"
        }, {
            "trigger": "touch",                 
            "contents": "touch( integer ${1:count} ) {\n\t$0\n}"
        }, {
            "trigger": "touch_end",             
            "contents": "touch_end( integer ${1:count} ) {\n\t$0\n}"
        }, {
            "trigger": "touch_start",           
            "contents": "touch_start( integer ${1:count} ) {\n\t$0\n}"
        }, {
            "trigger": "transaction_result",    
            "contents": "transaction_result( key ${1:id}, integer ${2:success}, string ${3:data} ) {\n\t$0\n}"
        }, {
            "trigger": "llAbs",                       
            "contents": "llAbs( ${1:integer val} )"
        }, {
            "trigger": "llAcos",                      
            "contents": "llAcos( ${1:float val} )"
        }, {
            "trigger": "llAddToLandBanList",          
            "contents": "llAddToLandBanList( ${1:key avatar}, ${2:float hours} )"
        }, {
            "trigger": "llAddToLandPassList",         
            "contents": "llAddToLandPassList( ${1:key avatar}, ${2:float hours} )"
        }, {
            "trigger": "llAdjustSoundVolume",         
            "contents": "llAdjustSoundVolume( ${1:float volume} )"
        }, {
            "trigger": "llAllowInventoryDrop",        
            "contents": "llAllowInventoryDrop( ${1:integer add} )"
        }, {
            "trigger": "llAngleBetween",              
            "contents": "llAngleBetween( ${1:rotation a}, ${2:rotation b} )"
        }, {
            "trigger": "llApplyImpulse",              
            "contents": "llApplyImpulse( ${1:vector force}, ${2:integer local} )"
        }, {
            "trigger": "llApplyRotationalImpulse",    
            "contents": "llApplyRotationalImpulse( ${1:vector force}, ${2:integer local} )"
        }, {
            "trigger": "llAsin",                      
            "contents": "llAsin( ${1:float val} )"
        }, {
            "trigger": "llAtan2",                     
            "contents": "llAtan2( ${1:float y}, ${2:float x} )"
        }, {
            "trigger": "llAttachToAvatar",            
            "contents": "llAttachToAvatar( ${1:integer attach_point} )"
        }, {
            "trigger": "llAttachToAvatarTemp",        
            "contents": "llAttachToAvatarTemp( ${1:integer attach_point} )"
        }, {
            "trigger": "llAvatarOnLinkSitTarget",     
            "contents": "llAvatarOnLinkSitTarget( ${1:integer link} )"
        }, {
            "trigger": "llAvatarOnSitTarget",         
            "contents": "llAvatarOnSitTarget()"
        }, {
            "trigger": "llAxes2Rot",                  
            "contents": "llAxes2Rot( ${1:vector fwd}, ${2:vector left}, ${3:vector up} )"
        }, {
            "trigger": "llAxisAngle2Rot",             
            "contents": "llAxisAngle2Rot( ${1:vector axis}, ${2:float angle} )"
        }, {
            "trigger": "llBase64ToInteger",           
            "contents": "llBase64ToInteger( ${1:string str} )"
        }, {
            "trigger": "llBase64ToString",            
            "contents": "llBase64ToString( ${1:string str} )"
        }, {
            "trigger": "llBreakAllLinks",             
            "contents": "llBreakAllLinks()"
        }, {
            "trigger": "llBreakLink",                 
            "contents": "llBreakLink( ${1:integer link} )"
        }, {
            "trigger": "llCastRay",                   
            "contents": "llCastRay( ${1:vector start}, ${2:vector end}, ${3:list options} )"
        }, {
            "trigger": "llCeil",                      
            "contents": "llCeil( ${1:float val} )"
        }, {
            "trigger": "llClearCameraParams",         
            "contents": "llClearCameraParams()"
        }, {
            "trigger": "llClearLinkMedia",            
            "contents": "llClearLinkMedia( ${1:integer link}, ${2:integer face} )"
        }, {
            "trigger": "llClearPrimMedia",            
            "contents": "llClearPrimMedia( ${1:integer face} )"
        }, {
            "trigger": "llCloseRemoteDataChannel",    
            "contents": "llCloseRemoteDataChannel( ${1:key channel} )"
        }, {
            "trigger": "llCollisionFilter",           
            "contents": "llCollisionFilter( ${1:string name}, ${2:key id}, ${3:integer accept} )"
        }, {
            "trigger": "llCollisionSound",            
            "contents": "llCollisionSound( ${1:string impact_sound}, ${2:float impact_volume} )"
        }, {
            "trigger": "llCos",                       
            "contents": "llCos( ${1:float theta} )"
        }, {
            "trigger": "llCreateCharacter",           
            "contents": "llCreateCharacter( ${1:list options} )"
        }, {
            "trigger": "llCreateLink",                
            "contents": "llCreateLink( ${1:key target}, ${2:integer parent} )"
        }, {
            "trigger": "llCSV2List",                  
            "contents": "llCSV2List( ${1:string src} )"
        }, {
            "trigger": "llDeleteCharacter",           
            "contents": "llDeleteCharacter()"
        }, {
            "trigger": "llDeleteSubList",             
            "contents": "llDeleteSubList( ${1:list src}, ${2:integer start}, ${3:integer end} )"
        }, {
            "trigger": "llDeleteSubString",           
            "contents": "llDeleteSubString( ${1:string src}, ${2:integer start}, ${3:integer end} )"
        }, {
            "trigger": "llDetachFromAvatar",          
            "contents": "llDetachFromAvatar()"
        }, {
            "trigger": "llDetectedGrab",              
            "contents": "llDetectedGrab( ${1:integer number} )"
        }, {
            "trigger": "llDetectedGroup",             
            "contents": "llDetectedGroup( ${1:integer number} )"
        }, {
            "trigger": "llDetectedKey",               
            "contents": "llDetectedKey( ${1:integer number} )"
        }, {
            "trigger": "llDetectedLinkNumber",        
            "contents": "llDetectedLinkNumber( ${1:integer number} )"
        }, {
            "trigger": "llDetectedName",              
            "contents": "llDetectedName( ${1:integer number} )"
        }, {
            "trigger": "llDetectedOwner",             
            "contents": "llDetectedOwner( ${1:integer number} )"
        }, {
            "trigger": "llDetectedPos",               
            "contents": "llDetectedPos( ${1:integer number} )"
        }, {
            "trigger": "llDetectedRot",               
            "contents": "llDetectedRot( ${1:integer number} )"
        }, {
            "trigger": "llDetectedTouchBinormal",     
            "contents": "llDetectedTouchBinormal( ${1:integer number} )"
        }, {
            "trigger": "llDetectedTouchFace",         
            "contents": "llDetectedTouchFace( ${1:integer number} )"
        }, {
            "trigger": "llDetectedTouchNormal",       
            "contents": "llDetectedTouchNormal( ${1:integer number} )"
        }, {
            "trigger": "llDetectedTouchPos",          
            "contents": "llDetectedTouchPos( ${1:integer number} )"
        }, {
            "trigger": "llDetectedTouchST",           
            "contents": "llDetectedTouchST( ${1:integer number} )"
        }, {
            "trigger": "llDetectedTouchUV",           
            "contents": "llDetectedTouchUV( ${1:integer number} )"
        }, {
            "trigger": "llDetectedType",              
            "contents": "llDetectedType( ${1:integer number} )"
        }, {
            "trigger": "llDetectedVel",               
            "contents": "llDetectedVel( ${1:integer number} )"
        }, {
            "trigger": "llDialog",                    
            "contents": "llDialog( ${1:key avatar}, ${2:string message}, ${3:list buttons}, ${4:integer channel} )"
        }, {
            "trigger": "llDie",                       
            "contents": "llDie()"
        }, {
            "trigger": "llDumpList2String",           
            "contents": "llDumpList2String( ${1:list src}, ${2:string separator} )"
        }, {
            "trigger": "llEdgeOfWorld",               
            "contents": "llEdgeOfWorld( ${1:vector pos}, ${2:vector dir} )"
        }, {
            "trigger": "llEjectFromLand",             
            "contents": "llEjectFromLand( ${1:key avatar} )"
        }, {
            "trigger": "llEmail",                     
            "contents": "llEmail( ${1:string address}, ${2:string subject}, ${3:string message} )"
        }, {
            "trigger": "llEscapeURL",                 
            "contents": "llEscapeURL( ${1:string url} )"
        }, {
            "trigger": "llEuler2Rot",                 
            "contents": "llEuler2Rot( ${1:vector v} )"
        }, {
            "trigger": "llExecCharacterCmd",          
            "contents": "llExecCharacterCmd( ${1:integer command}, ${2:list options} )"
        }, {
            "trigger": "llEvade",                     
            "contents": "llEvade( ${1:key target}, ${2:list options} )"
        }, {
            "trigger": "llFabs",                      
            "contents": "llFabs( ${1:float val} )"
        }, {
            "trigger": "llFleeFrom",                  
            "contents": "llFleeFrom( ${1:vector position}, ${2:float distance}, ${3:list options} )"
        }, {
            "trigger": "llFloor",                     
            "contents": "llFloor( ${1:float val} )"
        }, {
            "trigger": "llForceMouselook",            
            "contents": "llForceMouselook( ${1:integer mouselook} )"
        }, {
            "trigger": "llFrand",                     
            "contents": "llFrand( ${1:float mag} )"
        }, {
            "trigger": "llGenerateKey",               
            "contents": "llGenerateKey()"
        }, {
            "trigger": "llGetAccel",                  
            "contents": "llGetAccel()"
        }, {
            "trigger": "llGetAgentInfo",              
            "contents": "llGetAgentInfo( ${1:key id} )"
        }, {
            "trigger": "llGetAgentLanguage",          
            "contents": "llGetAgentLanguage( ${1:key avatar} )"
        }, {
            "trigger": "llGetAgentList",              
            "contents": "llGetAgentList( ${1:integer scope}, ${2:list options} )"
        }, {
            "trigger": "llGetAgentSize",              
            "contents": "llGetAgentSize( ${1:key avatar} )"
        }, {
            "trigger": "llGetAlpha",                  
            "contents": "llGetAlpha( ${1:integer face} )"
        }, {
            "trigger": "llGetAndResetTime",           
            "contents": "llGetAndResetTime()"
        }, {
            "trigger": "llGetAnimation",              
            "contents": "llGetAnimation( ${1:key id} )"
        }, {
            "trigger": "llGetAnimationList",          
            "contents": "llGetAnimationList( ${1:key avatar} )"
        }, {
            "trigger": "llGetAnimationOverride",      
            "contents": "llGetAnimationOverride( ${1:string anim_state} )"
        }, {
            "trigger": "llGetAttached",               
            "contents": "llGetAttached()"
        }, {
            "trigger": "llGetBoundingBox",            
            "contents": "llGetBoundingBox( ${1:key object} )"
        }, {
            "trigger": "llGetCameraPos",              
            "contents": "llGetCameraPos()"
        }, {
            "trigger": "llGetCameraRot",              
            "contents": "llGetCameraRot()"
        }, {
            "trigger": "llGetCenterOfMass",           
            "contents": "llGetCenterOfMass()"
        }, {
            "trigger": "llGetClosestNavPoint",        
            "contents": "llGetClosestNavPoint( ${1:vector point}, ${2:list options} )"
        }, {
            "trigger": "llGetColor",                  
            "contents": "llGetColor( ${1:integer face} )"
        }, {
            "trigger": "llGetCreator",                
            "contents": "llGetCreator()"
        }, {
            "trigger": "llGetDate",                   
            "contents": "llGetDate()"
        }, {
            "trigger": "llGetDisplayName",            
            "contents": "llGetDisplayName( ${1:key id} )"
        }, {
            "trigger": "llGetEnergy",                 
            "contents": "llGetEnergy()"
        }, {
            "trigger": "llGetEnv",                    
            "contents": "llGetEnv( ${1:string name} )"
        }, {
            "trigger": "llGetForce",                  
            "contents": "llGetForce()"
        }, {
            "trigger": "llGetFreeMemory",             
            "contents": "llGetFreeMemory()"
        }, {
            "trigger": "llGetFreeURLs",               
            "contents": "llGetFreeURLs()"
        }, {
            "trigger": "llGetGeometricCenter",        
            "contents": "llGetGeometricCenter()"
        }, {
            "trigger": "llGetGMTclock",               
            "contents": "llGetGMTclock()"
        }, {
            "trigger": "llGetHTTPHeader",             
            "contents": "llGetHTTPHeader( ${1:key request_id}, ${2:string header} )"
        }, {
            "trigger": "llGetInventoryCreator",       
            "contents": "llGetInventoryCreator( ${1:string item} )"
        }, {
            "trigger": "llGetInventoryKey",           
            "contents": "llGetInventoryKey( ${1:string name} )"
        }, {
            "trigger": "llGetInventoryName",          
            "contents": "llGetInventoryName( ${1:integer type}, ${2:integer number} )"
        }, {
            "trigger": "llGetInventoryNumber",        
            "contents": "llGetInventoryNumber( ${1:integer type} )"
        }, {
            "trigger": "llGetInventoryPermMask",      
            "contents": "llGetInventoryPermMask( ${1:string item}, ${2:integer mask} )"
        }, {
            "trigger": "llGetInventoryType",          
            "contents": "llGetInventoryType( ${1:string name} )"
        }, {
            "trigger": "llGetKey",                    
            "contents": "llGetKey()"
        }, {
            "trigger": "llGetLandOwnerAt",            
            "contents": "llGetLandOwnerAt( ${1:vector pos} )"
        }, {
            "trigger": "llGetLinkKey",                
            "contents": "llGetLinkKey( ${1:integer link} )"
        }, {
            "trigger": "llGetLinkMedia",              
            "contents": "llGetLinkMedia( ${1:integer link}, ${2:integer face}, ${3:list params} )"
        }, {
            "trigger": "llGetLinkName",               
            "contents": "llGetLinkName( ${1:integer link} )"
        }, {
            "trigger": "llGetLinkNumber",             
            "contents": "llGetLinkNumber()"
        }, {
            "trigger": "llGetLinkNumberOfSides",      
            "contents": "llGetLinkNumberOfSides( ${1:integer link} )"
        }, {
            "trigger": "llGetLinkPrimitiveParams",    
            "contents": "llGetLinkPrimitiveParams( ${1:integer link}, ${2:list params} )"
        }, {
            "trigger": "llGetListEntryType",          
            "contents": "llGetListEntryType( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llGetListLength",             
            "contents": "llGetListLength( ${1:list src} )"
        }, {
            "trigger": "llGetLocalPos",               
            "contents": "llGetLocalPos()"
        }, {
            "trigger": "llGetLocalRot",               
            "contents": "llGetLocalRot()"
        }, {
            "trigger": "llGetMass",                   
            "contents": "llGetMass()"
        }, {
            "trigger": "llGetMassMKS",                
            "contents": "llGetMassMKS()"
        }, {
            "trigger": "llGetMaxScaleFactor",         
            "contents": "llGetMaxScaleFactor()"
        }, {
            "trigger": "llGetMemoryLimit",            
            "contents": "llGetMemoryLimit()"
        }, {
            "trigger": "llGetMinScaleFactor",         
            "contents": "llGetMinScaleFactor()"
        }, {
            "trigger": "llGetNextEmail",              
            "contents": "llGetNextEmail( ${1:string address}, ${2:string subject} )"
        }, {
            "trigger": "llGetNotecardLine",           
            "contents": "llGetNotecardLine( ${1:string name}, ${2:integer line} )"
        }, {
            "trigger": "llGetNumberOfNotecardLines",  
            "contents": "llGetNumberOfNotecardLines( ${1:string name} )"
        }, {
            "trigger": "llGetNumberOfPrims",          
            "contents": "llGetNumberOfPrims()"
        }, {
            "trigger": "llGetNumberOfSides",          
            "contents": "llGetNumberOfSides()"
        }, {
            "trigger": "llGetObjectAnimationNames",
            "contents": "llGetObjectAnimationNames()"
        }, {
            "trigger": "llGetObjectDesc",             
            "contents": "llGetObjectDesc()"
        }, {
            "trigger": "llGetObjectDetails",          
            "contents": "llGetObjectDetails( ${1:key id}, ${2:list params} )"
        }, {
            "trigger": "llGetObjectMass",             
            "contents": "llGetObjectMass( ${1:key id} )"
        }, {
            "trigger": "llGetObjectName",             
            "contents": "llGetObjectName()"
        }, {
            "trigger": "llGetObjectPermMask",         
            "contents": "llGetObjectPermMask( ${1:integer mask} )"
        }, {
            "trigger": "llGetObjectPrimCount",        
            "contents": "llGetObjectPrimCount( ${1:key prim} )"
        }, {
            "trigger": "llGetOmega",                  
            "contents": "llGetOmega()"
        }, {
            "trigger": "llGetOwner",                  
            "contents": "llGetOwner()"
        }, {
            "trigger": "llGetOwnerKey",               
            "contents": "llGetOwnerKey( ${1:key id} )"
        }, {
            "trigger": "llGetParcelDetails",          
            "contents": "llGetParcelDetails( ${1:vector pos}, ${2:list params} )"
        }, {
            "trigger": "llGetParcelFlags",            
            "contents": "llGetParcelFlags( ${1:vector pos} )"
        }, {
            "trigger": "llGetParcelMaxPrims",         
            "contents": "llGetParcelMaxPrims( ${1:vector pos}, ${2:integer sim_wide} )"
        }, {
            "trigger": "llGetParcelMusicURL",         
            "contents": "llGetParcelMusicURL()"
        }, {
            "trigger": "llGetParcelPrimCount",        
            "contents": "llGetParcelPrimCount( ${1:vector pos}, ${2:integer category}, ${3:integer sim_wide} )"
        }, {
            "trigger": "llGetParcelPrimOwners",       
            "contents": "llGetParcelPrimOwners( ${1:vector pos} )"
        }, {
            "trigger": "llGetPermissions",            
            "contents": "llGetPermissions()"
        }, {
            "trigger": "llGetPermissionsKey",         
            "contents": "llGetPermissionsKey()"
        }, {
            "trigger": "llGetPhysicsMaterial",        
            "contents": "llGetPhysicsMaterial()"
        }, {
            "trigger": "llGetPos",                    
            "contents": "llGetPos()"
        }, {
            "trigger": "llGetPrimitiveParams",        
            "contents": "llGetPrimitiveParams( ${1:list params} )"
        }, {
            "trigger": "llGetPrimMediaParams",        
            "contents": "llGetPrimMediaParams( ${1:integer face}, ${2:list params} )"
        }, {
            "trigger": "llGetRegionAgentCount",       
            "contents": "llGetRegionAgentCount()"
        }, {
            "trigger": "llGetRegionCorner",           
            "contents": "llGetRegionCorner()"
        }, {
            "trigger": "llGetRegionFlags",            
            "contents": "llGetRegionFlags()"
        }, {
            "trigger": "llGetRegionFPS",              
            "contents": "llGetRegionFPS()"
        }, {
            "trigger": "llGetRegionName",             
            "contents": "llGetRegionName()"
        }, {
            "trigger": "llGetRegionTimeDilation",     
            "contents": "llGetRegionTimeDilation()"
        }, {
            "trigger": "llGetRootPosition",           
            "contents": "llGetRootPosition()"
        }, {
            "trigger": "llGetRootRotation",           
            "contents": "llGetRootRotation()"
        }, {
            "trigger": "llGetRot",                    
            "contents": "llGetRot()"
        }, {
            "trigger": "llGetScale",                  
            "contents": "llGetScale()"
        }, {
            "trigger": "llGetScriptName",             
            "contents": "llGetScriptName()"
        }, {
            "trigger": "llGetScriptState",            
            "contents": "llGetScriptState( ${1:string script} )"
        }, {
            "trigger": "llGetSimStats",               
            "contents": "llGetSimStats( ${1:integer stat_type} )"
        }, {
            "trigger": "llGetSimulatorHostname",      
            "contents": "llGetSimulatorHostname()"
        }, {
            "trigger": "llGetSPMaxMemory",            
            "contents": "llGetSPMaxMemory()"
        }, {
            "trigger": "llGetStartParameter",         
            "contents": "llGetStartParameter()"
        }, {
            "trigger": "llGetStaticPath",             
            "contents": "llGetStaticPath( ${1:vector start}, ${2:vector end}, ${3:float radius}, ${4:list params} )"
        }, {
            "trigger": "llGetStatus",                 
            "contents": "llGetStatus( ${1:integer status} )"
        }, {
            "trigger": "llGetSubString",              
            "contents": "llGetSubString( ${1:string src}, ${2:integer start}, ${3:integer end} )"
        }, {
            "trigger": "llGetSunDirection",           
            "contents": "llGetSunDirection()"
        }, {
            "trigger": "llGetTexture",                
            "contents": "llGetTexture( ${1:integer face} )"
        }, {
            "trigger": "llGetTextureOffset",          
            "contents": "llGetTextureOffset( ${1:integer face} )"
        }, {
            "trigger": "llGetTextureRot",             
            "contents": "llGetTextureRot( ${1:integer face} )"
        }, {
            "trigger": "llGetTextureScale",           
            "contents": "llGetTextureScale( ${1:integer face} )"
        }, {
            "trigger": "llGetTime",                   
            "contents": "llGetTime()"
        }, {
            "trigger": "llGetTimeOfDay",              
            "contents": "llGetTimeOfDay()"
        }, {
            "trigger": "llGetTimestamp",              
            "contents": "llGetTimestamp()"
        }, {
            "trigger": "llGetTorque",                 
            "contents": "llGetTorque()"
        }, {
            "trigger": "llGetUnixTime",               
            "contents": "llGetUnixTime()"
        }, {
            "trigger": "llGetUsedMemory",             
            "contents": "llGetUsedMemory()"
        }, {
            "trigger": "llGetUsername",               
            "contents": "llGetUsername( ${1:key id} )"
        }, {
            "trigger": "llGetVel",                    
            "contents": "llGetVel()"
        }, {
            "trigger": "llGetWallclock",              
            "contents": "llGetWallclock()"
        }, {
            "trigger": "llGiveInventory",             
            "contents": "llGiveInventory( ${1:key destination}, ${2:string inventory} )"
        }, {
            "trigger": "llGiveInventoryList",         
            "contents": "llGiveInventoryList( ${1:key target}, ${2:string folder}, ${3:list inventory} )"
        }, {
            "trigger": "llGiveMoney",                 
            "contents": "llGiveMoney( ${1:key destination}, ${2:integer amount} )"
        }, {
            "trigger": "llGround",                    
            "contents": "llGround( ${1:vector offset} )"
        }, {
            "trigger": "llGroundContour",             
            "contents": "llGroundContour( ${1:vector offset} )"
        }, {
            "trigger": "llGroundNormal",              
            "contents": "llGroundNormal( ${1:vector offset} )"
        }, {
            "trigger": "llGroundRepel",               
            "contents": "llGroundRepel( ${1:float height}, ${2:integer water}, ${3:float tau} )"
        }, {
            "trigger": "llGroundSlope",               
            "contents": "llGroundSlope( ${1:vector offset} )"
        }, {
            "trigger": "llHTTPRequest",               
            "contents": "llHTTPRequest( ${1:string url}, ${2:list parameters}, ${3:string body} )"
        }, {
            "trigger": "llHTTPResponse",              
            "contents": "llHTTPResponse( ${1:key request_id}, ${2:integer status}, ${3:string body} )"
        }, {
            "trigger": "llInsertString",              
            "contents": "llInsertString( ${1:string dst}, ${2:integer pos}, ${3:string src} )"
        }, {
            "trigger": "llInstantMessage",            
            "contents": "llInstantMessage( ${1:key user}, ${2:string message} )"
        }, {
            "trigger": "llIntegerToBase64",           
            "contents": "llIntegerToBase64( ${1:integer number} )"
        }, {
            "trigger": "llJson2List",                 
            "contents": "llJson2List( ${1:string json} )"
        }, {
            "trigger": "llJsonGetValue",              
            "contents": "llJsonGetValue( ${1:string json}, ${2:list specifiers} )"
        }, {
            "trigger": "llJsonSetValue",              
            "contents": "llJsonSetValue( ${1:string json}, ${2:list specifiers}, ${3:string newValue} )"
        }, {
            "trigger": "llJsonValueType",             
            "contents": "llJsonValueType( ${1:string json}, ${2:list specifiers} )"
        }, {
            "trigger": "llKey2Name",                  
            "contents": "llKey2Name( ${1:key id} )"
        }, {
            "trigger": "llLinkParticleSystem",        
            "contents": "llLinkParticleSystem( ${1:integer link}, ${2:list rules} )"
        }, {
            "trigger": "llLinkSitTarget",             
            "contents": "llLinkSitTarget( ${1:integer link}, ${2:vector offset}, ${3:rotation rot} )"
        }, {
            "trigger": "llList2CSV",                  
            "contents": "llList2CSV( ${1:list src} )"
        }, {
            "trigger": "llList2Float",                
            "contents": "llList2Float( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llList2Integer",              
            "contents": "llList2Integer( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llList2Json",
            "contents": "llList2Json( ${1:string type}, ${2:list values} )"
        }, {
            "trigger": "llList2Key",
            "contents": "llList2Key( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llList2List",
            "contents": "llList2List( ${1:list src}, ${2:integer start}, ${3:integer end} )"
        }, {
            "trigger": "llList2ListStrided",
            "contents": "llList2ListStrided( ${1:list src}, ${2:integer start}, ${3:integer end}, ${4:integer stride} )"
        }, {
            "trigger": "llList2Rot",                  
            "contents": "llList2Rot( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llList2String",               
            "contents": "llList2String( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llList2Vector",               
            "contents": "llList2Vector( ${1:list src}, ${2:integer index} )"
        }, {
            "trigger": "llListen",                    
            "contents": "llListen( ${1:integer channel}, ${2:string name}, ${3:key id}, ${4:string msg} )" 
        }, {
            "trigger": "llListenControl",             
            "contents": "llListenControl( ${1:integer handle}, ${2:integer active} )"
        }, {
            "trigger": "llListenRemove",              
            "contents": "llListenRemove( ${1:integer handle} )"
        }, {
            "trigger": "llListFindList",              
            "contents": "llListFindList( ${1:list src}, ${2:list test} )"
        }, {
            "trigger": "llListInsertList",            
            "contents": "llListInsertList( ${1:list dest}, ${2:list src}, ${3:integer start} )"
        }, {
            "trigger": "llListRandomize",             
            "contents": "llListRandomize( ${1:list src}, ${2:integer stride} )"
        }, {
            "trigger": "llListReplaceList",           
            "contents": "llListReplaceList( ${1:list dest}, ${2:list src}, ${3:integer start}, ${4:integer end} )"
        }, {
            "trigger": "llListSort",                  
            "contents": "llListSort( ${1:list src}, ${2:integer stride}, ${3:integer ascending} )"
        }, {
            "trigger": "llListStatistics",            
            "contents": "llListStatistics( ${1:integer operation}, ${2:list src} )"
        }, {
            "trigger": "llLoadURL",                   
            "contents": "llLoadURL( ${1:key avatar}, ${2:string message}, ${3:string url} )"
        }, {
            "trigger": "llLog",                       
            "contents": "llLog( ${1:float val} )"
        }, {
            "trigger": "llLog10",                     
            "contents": "llLog10( ${1:float val} )"
        }, {
            "trigger": "llLookAt",                    
            "contents": "llLookAt( ${1:vector target}, ${2:float strength}, ${3:float damping} )"
        }, {
            "trigger": "llLoopSound",                 
            "contents": "llLoopSound( ${1:string sound}, ${2:float volume} )"
        }, {
            "trigger": "llLoopSoundMaster",           
            "contents": "llLoopSoundMaster( ${1:string sound}, ${2:float volume} )"
        }, {
            "trigger": "llLoopSoundSlave",            
            "contents": "llLoopSoundSlave( ${1:string sound}, ${2:float volume} )"
        }, {
            "trigger": "llManageEstateAccess",        
            "contents": "llManageEstateAccess( ${1:integer action}, ${2:key avatar} )"
        }, {
            "trigger": "llMapDestination",            
            "contents": "llMapDestination( ${1:string simname}, ${2:vector pos}, ${3:vector look_at} )"
        }, {
            "trigger": "llMD5String",                 
            "contents": "llMD5String( ${1:string src}, ${2:integer nonce} )"
        }, {
            "trigger": "llMessageLinked",             
            "contents": "llMessageLinked( ${1:integer link}, ${2:integer num}, ${3:string str}, ${4:key id} )"
        }, {
            "trigger": "llMinEventDelay",             
            "contents": "llMinEventDelay( ${1:float delay} )"
        }, {
            "trigger": "llModifyLand",                
            "contents": "llModifyLand( ${1:integer action}, ${2:integer brush} )"
        }, {
            "trigger": "llModPow",                    
            "contents": "llModPow( ${1:integer a}, ${2:integer b}, ${3:integer c} )"
        }, {
            "trigger": "llMoveToTarget",              
            "contents": "llMoveToTarget( ${1:vector target}, ${2:float tau} )"
        }, {
            "trigger": "llName2Key",                  
            "contents": "llName2Key( ${1:string name} )"
        }, {
            "trigger": "llNavigateTo",                
            "contents": "llNavigateTo( ${1:vector pos}, ${2:list options} )"
        }, {
            "trigger": "llOffsetTexture",             
            "contents": "llOffsetTexture( ${1:float u}, ${2:float v}, ${3:integer face} )"
        }, {
            "trigger": "llOpenRemoteDataChannel",     
            "contents": "llOpenRemoteDataChannel()"
        }, {
            "trigger": "llOverMyLand",                
            "contents": "llOverMyLand( ${1:key id} )"
        }, {
            "trigger": "llOwnerSay",                  
            "contents": "llOwnerSay( ${1:string msg} )"
        }, {
            "trigger": "llParcelMediaCommandList",    
            "contents": "llParcelMediaCommandList( ${1:list commandList} )"
        }, {
            "trigger": "llParcelMediaQuery",          
            "contents": "llParcelMediaQuery( ${1:list query} )"
        }, {
            "trigger": "llParseString2List",          
            "contents": "llParseString2List( ${1:string src}, ${2:list separators}, ${3:list spacers} )"
        }, {
            "trigger": "llParseStringKeepNulls",      
            "contents": "llParseStringKeepNulls( ${1:string src}, ${2:list separators}, ${3:list spacers} )"
        }, {
            "trigger": "llParticleSystem",            
            "contents": "llParticleSystem( ${1:list rules} )"
        }, {
            "trigger": "llPassCollisions",            
            "contents": "llPassCollisions( ${1:integer pass} )"
        }, {
            "trigger": "llPassTouches",               
            "contents": "llPassTouches( ${1:integer pass} )"
        }, {
            "trigger": "llPatrolPoints",              
            "contents": "llPatrolPoints( ${1:list patrolPoints}, ${2:list options} )"
        }, {
            "trigger": "llPlaySound",                 
            "contents": "llPlaySound( ${1:string sound}, ${2:float volume} )"
        }, {
            "trigger": "llPlaySoundSlave",            
            "contents": "llPlaySoundSlave( ${1:string sound}, ${2:float volume} )"
        }, {
            "trigger": "llPow",                       
            "contents": "llPow( ${1:float base}, ${2:float exponent} )"
        }, {
            "trigger": "llPreloadSound",              
            "contents": "llPreloadSound( ${1:string sound} )"
        }, {
            "trigger": "llPursue",                    
            "contents": "llPursue( ${1:key target}, ${2:list options} )"
        }, {
            "trigger": "llPushObject",                
            "contents": "llPushObject( ${1:key target}, ${2:vector impulse}, ${3:vector ang_impulse}, ${4:integer local} )"
        }, {
            "trigger": "llRegionSay",                 
            "contents": "llRegionSay( ${1:integer channel}, ${2:string msg} )"
        }, {
            "trigger": "llRegionSayTo",               
            "contents": "llRegionSayTo( ${1:key target}, ${2:integer channel}, ${3:string msg} )"
        }, {
            "trigger": "llReleaseControls",           
            "contents": "llReleaseControls()"
        }, {
            "trigger": "llReleaseURL",                
            "contents": "llReleaseURL( ${1:string url} )"
        }, {
            "trigger": "llRemoteDataReply",           
            "contents": "llRemoteDataReply( ${1:key channel}, ${2:key message_id}, ${3:string sdata}, ${4:integer idata} )"
        }, {
            "trigger": "llRemoteLoadScriptPin",       
            "contents": "llRemoteLoadScriptPin( ${1:key target}, ${2:string name}, ${3:integer pin}, ${4:integer running}, ${5:integer start_param} )"
        }, {
            "trigger": "llRemoveFromLandBanList",     
            "contents": "llRemoveFromLandBanList( ${1:key avatar} )"
        }, {
            "trigger": "llRemoveFromLandPassList",    
            "contents": "llRemoveFromLandPassList( ${1:key avatar} )"
        }, {
            "trigger": "llRemoveInventory",           
            "contents": "llRemoveInventory( ${1:string item} )"
        }, {
            "trigger": "llRemoveVehicleFlags",        
            "contents": "llRemoveVehicleFlags( ${1:integer flags} )"
        }, {
            "trigger": "llRequestAgentData",          
            "contents": "llRequestAgentData( ${1:key id}, ${2:integer data} )"
        }, {
            "trigger": "llRequestDisplayName",        
            "contents": "llRequestDisplayName( ${1:key id} )"
        }, {
            "trigger": "llRequestInventoryData",      
            "contents": "llRequestInventoryData( ${1:string name} )"
        }, {
            "trigger": "llRequestPermissions",        
            "contents": "llRequestPermissions( ${1:key agent}, ${2:integer permissions} )"
        }, {
            "trigger": "llRequestSecureURL",          
            "contents": "llRequestSecureURL()"
        }, {
            "trigger": "llRequestSimulatorData",      
            "contents": "llRequestSimulatorData( ${1:string region}, ${2:integer data} )"
        }, {
            "trigger": "llRequestURL",                
            "contents": "llRequestURL()"
        }, {
            "trigger": "llRequestUserKey",            
            "contents": "llRequestUserKey( ${1:string username} )"
        }, {
            "trigger": "llRequestUsername",           
            "contents": "llRequestUsername( ${1:key id} )"
        }, {
            "trigger": "llResetLandBanList",          
            "contents": "llResetLandBanList()"
        }, {
            "trigger": "llResetLandPassList",         
            "contents": "llResetLandPassList()"
        }, {
            "trigger": "llResetAnimationOverride",    
            "contents": "llResetAnimationOverride( ${1:string anim_state} )"
        }, {
            "trigger": "llResetOtherScript",          
            "contents": "llResetOtherScript( ${1:string name} )"
        }, {
            "trigger": "llResetScript",               
            "contents": "llResetScript()"
        }, {
            "trigger": "llResetTime",                 
            "contents": "llResetTime()"
        }, {
            "trigger": "llReturnObjectsByID",         
            "contents": "llReturnObjectsByID( ${1:list objects} )"
        }, {
            "trigger": "llReturnObjectsByOwner",      
            "contents": "llReturnObjectsByOwner( ${1:key owner}, ${2:integer scope} )"
        }, {
            "trigger": "llRezAtRoot",                 
            "contents": "llRezAtRoot( ${1:string inventory}, ${2:vector position}, ${3:vector velocity}, ${4:rotation rot}, ${5:integer param} )"
        }, {
            "trigger": "llRezObject",                 
            "contents": "llRezObject( ${1:string inventory}, ${2:vector pos}, ${3:vector vel}, ${4:rotation rot}, ${5:integer param} )"
        }, {
            "trigger": "llRot2Angle",                 
            "contents": "llRot2Angle( ${1:rotation rot} )"
        }, {
            "trigger": "llRot2Axis",                  
            "contents": "llRot2Axis( ${1:rotation rot} )"
        }, {
            "trigger": "llRot2Euler",                 
            "contents": "llRot2Euler( ${1:rotation quat} )"
        }, {
            "trigger": "llRot2Fwd",                   
            "contents": "llRot2Fwd( ${1:rotation q} )"
        }, {
            "trigger": "llRot2Left",                  
            "contents": "llRot2Left( ${1:rotation q} )"
        }, {
            "trigger": "llRot2Up",                    
            "contents": "llRot2Up( ${1:rotation q} )"
        }, {
            "trigger": "llRotateTexture",             
            "contents": "llRotateTexture( ${1:float angle}, ${2:integer face} )"
        }, {
            "trigger": "llRotBetween",                
            "contents": "llRotBetween( ${1:vector start}, ${2:vector end} )"
        }, {
            "trigger": "llRotLookAt",                 
            "contents": "llRotLookAt( ${1:rotation target_direction}, ${2:float strength}, ${3:float damping} )"
        }, {
            "trigger": "llRotTarget",                 
            "contents": "llRotTarget( ${1:rotation rot}, ${2:float error} )"
        }, {
            "trigger": "llRotTargetRemove",           
            "contents": "llRotTargetRemove( ${1:integer handle} )"
        }, {
            "trigger": "llRound",                     
            "contents": "llRound( ${1:float val} )"
        }, {
            "trigger": "llSameGroup",                 
            "contents": "llSameGroup( ${1:key uuid} )"
        }, {
            "trigger": "llSay",                       
            "contents": "llSay( ${1:integer channel}, ${2:string msg} )"
        }, {
            "trigger": "llScaleByFactor",             
            "contents": "llScaleByFactor( ${1:float scaling_factor} )"
        }, {
            "trigger": "llScaleTexture",              
            "contents": "llScaleTexture( ${1:float u}, ${2:float v}, ${3:integer face} )"
        }, {
            "trigger": "llScriptDanger",              
            "contents": "llScriptDanger( ${1:vector pos} )"
        }, {
            "trigger": "llScriptProfiler",            
            "contents": "llScriptProfiler( ${1:integer flags} )"
        }, {
            "trigger": "llSendRemoteData",            
            "contents": "llSendRemoteData( ${1:key channel}, ${2:string dest}, ${3:integer idata}, ${4:string sdata} )"
        }, {
            "trigger": "llSensor",                    
            "contents": "llSensor( ${1:string name}, ${2:key id}, ${3:integer type}, ${4:float range}, ${5:float arc} )"
        }, {
            "trigger": "llSensorRemove",              
            "contents": "llSensorRemove()"
        }, {
            "trigger": "llSensorRepeat",              
            "contents": "llSensorRepeat( ${1:string name}, ${2:key id}, ${3:integer type}, ${4:float range}, ${5:float arc}, ${6:float rate} )"
        }, {
            "trigger": "llSetAlpha",                  
            "contents": "llSetAlpha( ${1:float alpha}, ${2:integer face} )"
        }, {
            "trigger": "llSetAngularVelocity",        
            "contents": "llSetAngularVelocity( ${1:vector force}, ${2:integer local} )"
        }, {
            "trigger": "llSetAnimationOverride",      
            "contents": "llSetAnimationOverride( ${1:string anim_state}, ${2:string anim} )"
        }, {
            "trigger": "llSetBuoyancy",               
            "contents": "llSetBuoyancy( ${1:float buoyancy} )"
        }, {
            "trigger": "llSetCameraAtOffset",         
            "contents": "llSetCameraAtOffset( ${1:vector offset} )"
        }, {
            "trigger": "llSetCameraEyeOffset",        
            "contents": "llSetCameraEyeOffset( ${1:vector offset} )"
        }, {
            "trigger": "llSetCameraParams",           
            "contents": "llSetCameraParams( ${1:list rules} )"
        }, {
            "trigger": "llSetClickAction",            
            "contents": "llSetClickAction( ${1:integer action} )"
        }, {
            "trigger": "llSetColor",                  
            "contents": "llSetColor( ${1:vector color}, ${2:integer face} )"
        }, {
            "trigger": "llSetContentType",            
            "contents": "llSetContentType( ${1:key request_id}, ${2:integer content_type} )"
        }, {
            "trigger": "llSetDamage",                 
            "contents": "llSetDamage( ${1:float damage} )"
        }, {
            "trigger": "llSetForce",                  
            "contents": "llSetForce( ${1:vector force}, ${2:integer local} )"
        }, {
            "trigger": "llSetForceAndTorque",         
            "contents": "llSetForceAndTorque( ${1:vector force}, ${2:vector torque}, ${3:integer local} )"
        }, {
            "trigger": "llSetHoverHeight",            
            "contents": "llSetHoverHeight( ${1:float height}, ${2:integer water}, ${3:float tau} )"
        }, {
            "trigger": "llSetKeyframedMotion",        
            "contents": "llSetKeyframedMotion( ${1:list keyframes}, ${2:list options} )"
        }, {
            "trigger": "llSetLinkAlpha",              
            "contents": "llSetLinkAlpha( ${1:integer link}, ${2:float alpha}, ${3:integer face} )"
        }, {
            "trigger": "llSetLinkCamera",             
            "contents": "llSetLinkCamera( ${1:integer link}, ${2:vector eye}, ${3:vector at} )"
        }, {
            "trigger": "llSetLinkColor",              
            "contents": "llSetLinkColor( ${1:integer link}, ${2:vector color}, ${3:integer face} )"
        }, {
            "trigger": "llSetLinkMedia",              
            "contents": "llSetLinkMedia( ${1:integer link}, ${2:integer face}, ${3:list params} )"
        }, {
            "trigger": "llSetLinkPrimitiveParams",    
            "contents": "llSetLinkPrimitiveParams( ${1:integer link}, ${2:list rules} )"
        }, {
            "trigger": "llSetLinkPrimitiveParamsFast",
            "contents": "llSetLinkPrimitiveParamsFast( ${1:integer link}, ${2:list rules} )"
        }, {
            "trigger": "llSetLinkTexture",            
            "contents": "llSetLinkTexture( ${1:integer link}, ${2:string texture}, ${3:integer face} )"
        }, {
            "trigger": "llSetLinkTextureAnim",        
            "contents": "llSetLinkTextureAnim( ${1:integer link}, ${2:integer mode}, ${3:integer face}, ${4:integer sizex}, ${5:integer sizey}, ${6:float start}, ${7:float length}, ${8:float rate} )"
        }, {
            "trigger": "llSetLocalRot",               
            "contents": "llSetLocalRot( ${1:rotation rot} )"
        }, {
            "trigger": "llSetMemoryLimit",            
            "contents": "llSetMemoryLimit( ${1:integer limit} )"
        }, {
            "trigger": "llSetObjectDesc",             
            "contents": "llSetObjectDesc( ${1:string description} )"
        }, {
            "trigger": "llSetObjectName",             
            "contents": "llSetObjectName( ${1:string name} )"
        }, {
            "trigger": "llSetParcelMusicURL",         
            "contents": "llSetParcelMusicURL( ${1:string url} )"
        }, {
            "trigger": "llSetPayPrice",               
            "contents": "llSetPayPrice( ${1:integer price}, [ ${2:integer price_button_a}, ${3:integer price_button_b}, ${4:integer price_button_c}, ${5:integer price_button_d} ] )"
        }, {
            "trigger": "llSetPhysicsMaterial",        
            "contents": "llSetPhysicsMaterial( ${1:integer mask}, ${2:float gravity_multiplier}, ${3:float restitution}, ${4:float friction}, ${5:float density} )"
        }, {
            "trigger": "llSetPos",                    
            "contents": "llSetPos( ${1:vector pos} )"
        }, {
            "trigger": "llSetPrimitiveParams",        
            "contents": "llSetPrimitiveParams( ${1:list rules} )"
        }, {
            "trigger": "llSetPrimMediaParams",        
            "contents": "llSetPrimMediaParams( ${1:integer face}, ${2:list params} )"
        }, {
            "trigger": "llSetRegionPos",              
            "contents": "llSetRegionPos( ${1:vector position} )"
        }, {
            "trigger": "llSetRemoteScriptAccessPin",  
            "contents": "llSetRemoteScriptAccessPin( ${1:integer pin} )"
        }, {
            "trigger": "llSetRot",                    
            "contents": "llSetRot( ${1:rotation rot} )"
        }, {
            "trigger": "llSetScale",                  
            "contents": "llSetScale( ${1:vector size} )"
        }, {
            "trigger": "llSetScriptState",            
            "contents": "llSetScriptState( ${1:string name}, ${2:integer run} )"
        }, {
            "trigger": "llSetSitText",                
            "contents": "llSetSitText( ${1:string text} )"
        }, {
            "trigger": "llSetSoundQueueing",          
            "contents": "llSetSoundQueueing( ${1:integer queue} )"
        }, {
            "trigger": "llSetSoundRadius",            
            "contents": "llSetSoundRadius( ${1:float radius} )"
        }, {
            "trigger": "llSetStatus",                 
            "contents": "llSetStatus( ${1:integer status}, ${2:integer value} )"
        }, {
            "trigger": "llSetText",                   
            "contents": "llSetText( ${1:string text}, ${2:vector color}, ${3:float alpha} )"
        }, {
            "trigger": "llSetTexture",                
            "contents": "llSetTexture( ${1:string texture}, ${2:integer face} )"
        }, {
            "trigger": "llSetTextureAnim",            
            "contents": "llSetTextureAnim( ${1:integer mode}, ${2:integer face}, ${3:integer sizex}, ${4:integer sizey}, ${5:float start}, ${6:float length}, ${7:float rate} )"
        }, {
            "trigger": "llSetTimerEvent",             
            "contents": "llSetTimerEvent( ${1:float sec} )"
        }, {
            "trigger": "llSetTorque",                 
            "contents": "llSetTorque( ${1:vector torque}, ${2:integer local} )"
        }, {
            "trigger": "llSetTouchText",              
            "contents": "llSetTouchText( ${1:string text} )"
        }, {
            "trigger": "llSetVehicleFlags",           
            "contents": "llSetVehicleFlags( ${1:integer flags} )"
        }, {
            "trigger": "llSetVehicleFloatParam",      
            "contents": "llSetVehicleFloatParam( ${1:integer param}, ${2:float value} )"
        }, {
            "trigger": "llSetVehicleRotationParam",   
            "contents": "llSetVehicleRotationParam( ${1:integer param}, ${2:rotation rot} )"
        }, {
            "trigger": "llSetVehicleType",            
            "contents": "llSetVehicleType( ${1:integer type} )"
        }, {
            "trigger": "llSetVehicleVectorParam",     
            "contents": "llSetVehicleVectorParam( ${1:integer param}, ${2:vector vec} )"
        }, {
            "trigger": "llSetVelocity",               
            "contents": "llSetVelocity( ${1:vector force}, ${2:integer local} )"
        }, {
            "trigger": "llSHA1String",                
            "contents": "llSHA1String( ${1:string src} )"
        }, {
            "trigger": "llShout",                     
            "contents": "llShout( ${1:integer channel}, ${2:string msg} )"
        }, {
            "trigger": "llSin",                       
            "contents": "llSin( ${1:float theta} )"
        }, {
            "trigger": "llSitTarget",                 
            "contents": "llSitTarget( ${1:vector offset}, ${2:rotation rot} )"
        }, {
            "trigger": "llSleep",                     
            "contents": "llSleep( ${1:float sec} )"
        }, {
            "trigger": "llSqrt",                      
            "contents": "llSqrt( ${1:float val} )"
        }, {
            "trigger": "llStartAnimation",            
            "contents": "llStartAnimation( ${1:string anim} )"
        }, {
            "trigger": "llStartObjectAnimation",
            "contents": "llStartObjectAnimation( ${1:string anim} )"
        }, {
            "trigger": "llStopAnimation",             
            "contents": "llStopAnimation( ${1:string anim} )"
        }, {
            "trigger": "llStopHover",                 
            "contents": "llStopHover()"
        }, {
            "trigger": "llStopLookAt",                
            "contents": "llStopLookAt()"
        }, {
            "trigger": "llStopMoveToTarget",          
            "contents": "llStopMoveToTarget()"
        }, {
            "trigger": "llStopObjectAnimation",
            "contents": "llStopObjectAnimation( ${1:string anim} )"
        }, {
            "trigger": "llStopSound",                 
            "contents": "llStopSound()"
        }, {
            "trigger": "llStringLength",              
            "contents": "llStringLength( ${1:string str} )"
        }, {
            "trigger": "llStringToBase64",            
            "contents": "llStringToBase64( ${1:string str} )"
        }, {
            "trigger": "llStringTrim",                
            "contents": "llStringTrim( ${1:string src}, ${2:integer type} )"
        }, {
            "trigger": "llSubStringIndex",            
            "contents": "llSubStringIndex( ${1:string source}, ${2:string pattern} )"
        }, {
            "trigger": "llTakeControls",              
            "contents": "llTakeControls( ${1:integer controls}, ${2:integer accept}, ${3:integer pass_on} )"
        }, {
            "trigger": "llTan",                       
            "contents": "llTan( ${1:float theta} )"
        }, {
            "trigger": "llTarget",                    
            "contents": "llTarget( ${1:vector position}, ${2:float range} )"
        }, {
            "trigger": "llTargetOmega",               
            "contents": "llTargetOmega( ${1:vector axis}, ${2:float spinrate}, ${3:float gain} )"
        }, {
            "trigger": "llTargetRemove",              
            "contents": "llTargetRemove( ${1:integer handle} )"
        }, {
            "trigger": "llTeleportAgent",             
            "contents": "llTeleportAgent( ${1:key avatar}, ${2:string landmark}, ${3:vector position}, ${4:vector look_at} )"
        }, {
            "trigger": "llTeleportAgentGlobalCoords", 
            "contents": "llTeleportAgentGlobalCoords( ${1:key agent}, ${2:vector global_coordinates}, ${3:vector region_coordinates}, ${4:vector look_at} )"
        }, {
            "trigger": "llTeleportAgentHome",         
            "contents": "llTeleportAgentHome( ${1:key avatar} )"
        }, {
            "trigger": "llTextBox",                   
            "contents": "llTextBox( ${1:key avatar}, ${2:string message}, ${3:integer channel} )"
        }, {
            "trigger": "llToLower",                   
            "contents": "llToLower( ${1:string src} )"
        }, {
            "trigger": "llToUpper",                   
            "contents": "llToUpper( ${1:string src} )"
        }, {
            "trigger": "llTransferLindenDollars",     
            "contents": "llTransferLindenDollars( ${1:key destination}, ${2:integer amount} )"
        }, {
            "trigger": "llTriggerSound",              
            "contents": "llTriggerSound( ${1:string sound}, ${2:float volume} )"
        }, {
            "trigger": "llTriggerSoundLimited",       
            "contents": "llTriggerSoundLimited( ${1:string sound}, ${2:float volume}, ${3:vector top_north_east}, ${4:vector bottom_south_west} )"
        }, {
            "trigger": "llUnescapeURL",               
            "contents": "llUnescapeURL( ${1:string url} )"
        }, {
            "trigger": "llUnSit",                     
            "contents": "llUnSit( ${1:key id} )"
        }, {
            "trigger": "llUpdateCharacter",           
            "contents": "llUpdateCharacter( ${1:list options} )"
        }, {
            "trigger": "llVecDist",                   
            "contents": "llVecDist( ${1:vector vec_a}, ${2:vector vec_b} )"
        }, {
            "trigger": "llVecMag",                    
            "contents": "llVecMag( ${1:vector vec} )"
        }, {
            "trigger": "llVecNorm",                   
            "contents": "llVecNorm( ${1:vector vec} )"
        }, {
            "trigger": "llVolumeDetect",              
            "contents": "llVolumeDetect( ${1:integer detect} )"
        }, {
            "trigger": "llWanderWithin",              
            "contents": "llWanderWithin( ${1:vector origin}, ${2:vector dist}, ${3:list options} )"
        }, {
            "trigger": "llWater",                     
            "contents": "llWater( ${1:vector offset} )"
        }, {
            "trigger": "llWhisper",                   
            "contents": "llWhisper( ${1:integer channel}, ${2:string msg} )"
        }, {
            "trigger": "llWind",                      
            "contents": "llWind( ${1:vector offset} )"
        }, {
            "trigger": "llXorBase64",                 
            "contents": "llXorBase64( ${1:string str1}, ${2:string str2} )"
        }
    ]
}
